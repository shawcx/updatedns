#!/usr/bin/env python3

from __future__ import print_function

import fcntl
import json
import os
import socket
import struct
import sys
import time

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

try:
    import libcloud.dns.providers
    from libcloud.dns.types import Provider, RecordType
except ImportError:
    sys.stderr.write('Missing libcloud package\n')
    sys.exit(-1)


def main():
    hosts      = {}
    providers  = {}
    interfaces = {}

    ini = configparser.SafeConfigParser()
    ini.optionxform = str

    try:
        ok = ini.read(['updatedns.ini'])
    except configparser.ParsingError as e:
        print(e)
        return -1

    for section in ini.sections():
        section = section.strip()
        
        if section.startswith(':'):
            provider = section[1:]
            Driver = libcloud.dns.providers.get_driver(getattr(Provider, provider))
            credentials = dict(ini.items(section))
            driver = Driver(**credentials)
            providers[provider] = driver
        
        else:
            host = dict(ini.items(section))
            if 'interface' not in host:
                print('Missing interface from host', section)
                return None

            if host['interface'] not in interfaces:
                interfaces[host['interface']] = None

            hosts[section] = host

    for name,driver in providers.items():
        zones = driver.list_zones()
        for zone in zones:
            records = driver.list_records(zone)
            for record in records:
                if record.type != 'A':
                    continue

                hostname = zone.domain

                if hostname.endswith('.'):
                    hostname = hostname[:-1]
                
                if record.name:
                    hostname = record.name + '.' + hostname

                if hostname in hosts:
                    hosts[hostname]['driver'] = driver
                    hosts[hostname]['record'] = record
                    print(hostname, record.data)

    while True:
        for interface in interfaces:
            try:
                local_address = get_local_address(interface)
            except Exception as e:
                print('Could not get address for interface', interface, ':', e)
                continue

            if local_address != interfaces[interface]:
                print('Interface', repr(interface), 'address:', local_address)
                interfaces[interface] = local_address

        for host,params in hosts.items():
            local_address = interfaces[params['interface']]
            record = params['record']
            if local_address != record.data:
                print('Updating', record.name, 'to', local_address)
                params['driver'].update_record(record, record.name, record.type, local_address)
                record.data = local_address

        time.sleep(60.0)

    return 0


def get_local_address(ifname):
    SIOCGIFADDR = 0x8915
    skt = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    ifname = ifname[:15].encode('ascii')
    ifname = struct.pack('256s', ifname)
    data = fcntl.ioctl(skt.fileno(), SIOCGIFADDR, ifname)
    return socket.inet_ntoa(data[20:24])


if '__main__' == __name__:
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass
